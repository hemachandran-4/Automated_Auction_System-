package com.auction_dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.auction_bean.Product;
import com.auction_bean.Seller;
import com.auction_bean.SellerId;
import com.auction_exception.ProductException;
import com.auction_exception.SellerException;
import com.auction_utility.DBUtil;

public class SellerImplementation implements SellerInterface{

	@Override
	public String sellerRegistration(Seller seller) {
		String message="registration unsuccessful";
		try(Connection conn=DBUtil.provideConnection()){
			PreparedStatement ps=conn.prepareStatement("insert into seller(seller_name,seller_email,seller_password,seller_signup_date) value(?,?,?,?)");
			ps.setString(1, seller.getSeller_name());
			ps.setString(2, seller.getSeller_email());
			ps.setString(3, seller.getSeller_password());
			ps.setDate(4,seller.getSeller_signup_date());
			
			int x=ps.executeUpdate();
			if(x>0) message="Welcome "+ seller.getSeller_name()+"..! Registration Successfull";
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			message=e.getMessage();
		}
		return message;
	}

	@Override
	public Seller sellerLogin(String email,String password) throws SellerException {
		try(Connection conn=DBUtil.provideConnection()){
			PreparedStatement ps=conn.prepareStatement("select * from seller where seller_email=? AND seller_password=?");
			ps.setString(1, email);
			ps.setString(2, password);
			
			ResultSet rs=ps.executeQuery();
			if(rs.next()) {
				String name=rs.getString("seller_name");
				Date date=rs.getDate("seller_signup_date");
				Seller seller=new Seller(name,email,password,date);
				return seller;
			}
			else throw new SellerException("Invalid Input");
		}
		catch(SQLException e) {
			System.out.println(e.getMessage());
		}
		return null;
	}

	@Override
	public String sellerAddProduct(Product p) throws ProductException {
		String message="Product not added";
		try(Connection conn=DBUtil.provideConnection()){
			PreparedStatement ps=conn.prepareStatement("insert into product(seller_id,disputed,product_added_date,availability,product_name,product_time_limit,product_price,sold) values(?,?,?,?,?,?,?,?)");
			ps.setInt(1,p.getSeller_id());
			ps.setBoolean(2, p.isDisputed());
			ps.setDate(3, p.getProduct_added_date());
			ps.setBoolean(4, p.isAvailability());
			ps.setString(5, p.getProduct_name());
			ps.setDate(6, p.getProduct_last_date());
			ps.setInt(7, p.getMin_bid_amount());
			ps.setBoolean(8, p.isSold());
			
			int x=ps.executeUpdate();
			if(x>0) message="Product added successfully";
			else throw new ProductException(message);
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			System.out.println(e.getMessage());
		}
		return null;
	}

	@Override
	public SellerId getSellerId(String name) throws SellerException {
		try(Connection conn=DBUtil.provideConnection()){
			PreparedStatement ps=conn.prepareStatement("select * from seller where seller_name=?");
			ps.setString(1, name);
			ResultSet rs=ps.executeQuery();
			if(rs.next()) {
				int seller_id=rs.getInt("seller_id");
				
				SellerId sid=new SellerId(seller_id);
				return sid;
			}
			else throw new SellerException("Invalid Input");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

}
