package com.auction_dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import com.auction_bean.Bid;
import com.auction_bean.Buyer;
import com.auction_bean.BuyerId;
import com.auction_bean.Product;
import com.auction_exception.BuyerException;
import com.auction_exception.ProductException;
import com.auction_utility.DBUtil;

public class BuyerImplementation implements BuyerInterface{
		@Override
		
		public String registerBuyer(Buyer b) throws BuyerException {
			String message="Registration Unsuccessful";
			try(Connection conn=DBUtil.provideConnection()){
				
				PreparedStatement ps=conn.prepareStatement("insert into buyer(buyer_name,buyer_email,buyer_password,buyer_signup_date) value(?,?,?,?)");
				ps.setString(1, b.getBuyer_name());
				ps.setString(2, b.getBuyer_email());
				ps.setString(3, b.getBuyer_password());
				ps.setDate(4, b.getBuyer_signup_date());
				
				int x=ps.executeUpdate();
				if(x>0) message="Registration successful";
				else throw new BuyerException(message);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				message=e.getMessage();
			}
			return message;
		}

		@Override
		public Buyer loginBuyer(String email, String password) throws BuyerException {
			
			try(Connection conn=DBUtil.provideConnection()){
				PreparedStatement ps=conn.prepareStatement("select * from buyer where buyer_email=? AND buyer_password=?");
				ps.setString(1, email);
				ps.setString(2, password);
				
				ResultSet rs=ps.executeQuery();
				if(rs.next()) {
					String name=rs.getString("buyer_name");
					Date b_signup_date=rs.getDate("buyer_signup_date");
					
					Buyer b1=new Buyer(name, email, password, b_signup_date);
					return b1;
				}
				else {
					throw new BuyerException("Invalid Entry");
				}
			}catch(SQLException e) {
				System.out.println(e.getMessage());
			}
			return null;
		}

		
		@Override
		public List<Product> viewAllProdcut() throws ProductException {
			List<Product> plist=new ArrayList<>();
			try(Connection conn=DBUtil.provideConnection()){
				PreparedStatement ps=conn.prepareStatement("select * from product where availability=?");
				ps.setBoolean(1, true);
				
				ResultSet rs=ps.executeQuery();
				while(rs.next()) {
					int product_id=rs.getInt("product_id");
					int seller_id=rs.getInt("seller_id");
					boolean disputed=rs.getBoolean("disputed");
					Date product_added_date=rs.getDate("product_added_date");
					boolean availability=rs.getBoolean("availability");
					String product_name=rs.getString("product_name");
					Date product_time_limit=rs.getDate("product_time_limit");
					int product_price=rs.getInt("product_price");
					int product_selling_price=rs.getInt("product_selling_price");
					int buyer_id=rs.getInt("buyer_id");
					boolean sold=rs.getBoolean("sold");
					int product_minimum_bid=rs.getInt("product_minimum_bid");
					
					Product p1=new Product(product_name, seller_id, product_price, disputed, product_added_date, product_time_limit, availability, product_minimum_bid, sold, buyer_id);
					plist.add(p1);
				}
			}
			catch(SQLException e) {
				System.out.println(e.getMessage());
			}
			if(plist.size()==0) throw new ProductException("No products found. Try later");
			return plist;
		}


		@Override
		public Bid bidOnProduct(int amount, int pid, int bid) throws ProductException {
			try(Connection conn=DBUtil.provideConnection()){
				PreparedStatement ps=conn.prepareStatement("select * from product where product_id=? AND availability=?");
				ps.setInt(1, pid);
				ps.setBoolean(2, true);
				
				ResultSet rs=ps.executeQuery();
				if(rs.next()) {
					int product_minimum_bid=rs.getInt("product_minimum_bid");
					int product_selling_price=rs.getInt("product_selling_price");
					int product_price=rs.getInt("product_price");
					
					if(product_selling_price==0) product_selling_price=product_price;
					
					if(product_minimum_bid<=amount) {
						Bid b1=new Bid(pid, bid, Date.valueOf(LocalDate.now()), amount, product_selling_price, product_selling_price+amount);
						PreparedStatement ps2=conn.prepareStatement("update product SET product_selling_price=?,buyer_id=? where product_id=?");
						ps2.setInt(1,product_selling_price);
						ps2.setInt(2, bid);
						ps2.setInt(3, pid);
						
						int x=ps2.executeUpdate();
						if(x>0) {
							System.out.println("Update successful");
						}
						else throw new ProductException("Product not found");
						
						
						return b1;
					}
					else {
						throw new ProductException("Minimum bidding amount is "+product_minimum_bid);
					}
				}
				else {
					throw new ProductException("No such product found");
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				System.out.println(e.getMessage());
			}
			return null;
		}

		@Override
		public BuyerId getBuyerId(String name) throws BuyerException {
			BuyerId bid=null;
			try(Connection conn=DBUtil.provideConnection()){
				PreparedStatement ps=conn.prepareStatement("select * from buyer where buyer_name=?");
				ps.setString(1, name);
				
				ResultSet rs=ps.executeQuery();
				if(rs.next()) {
					int id=rs.getInt("buyer_id");
					
					bid=new BuyerId(id);
					return bid;
				}
				else throw new BuyerException("Buyer name not found ");
				
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				System.out.println(e.getMessage());
			}
			return bid;
		}

		
		
}
